Maik
 Doing master thesis on a build server


Ronny
 - CI server with documents in couchdb



CI pipeline (ronny)
 - code checks, linters, deployment step
 - run the complete build pipeline locally
 - superset of tox
 - multiple nodes in a single pipeline
 - each step in the pipeline should be runnable on each node
 - possible to do multiple steps in the same part of the pipeline
 - set up dependencies so time consuming jobs are not always being run

floris:
- one node connects to the master, reports
- build matrix
- multiple repositories


andreas
 - having settings/build configuration in travis CI
 - configuration in version control (always in sync with your code)


floris:
 - generic builds
 - multi repository support
 - one job, multiple repositories
 - configuration in version control


maik:
 - travis/jenkins
 - very good UI that presents
 - stages of jobs, stages contains tasks, can be run in parallel
  https://confluence.atlassian.com/display/BAMBOO/Understanding+the+Bamboo+CI+Server?preview=/289277285/319619101/BambooPlanAnatomy.png#
 - plugin hell of jenkins
 - minimal "github" workflow with pull requests - batteries included for python best practises
 - dynamic branches (plan branches in bamboo)
 - scaling for needs ie. minimal scheduler to run locally, add celery and rabbitmq (or something) for bigger installations
 - platform independent configurations

ronny:
- send test results back to the build server (idea from devpi?)
- keep it as simple as possible and stick to pure python (to be platform agnostic)

raphael:
- be able to run builds locally while offline
- configuration via textfiles
- configuration for multiple platforms
- collect artifacts of the build steps (docs, pypi distribution, ...)

ronnys CI project:
- uses couchdb to sync state changes to worker nodes. puts job description into a document and lets couchdb sync docs to nodes

ronny:
projects to look at:
- python-effect
- pluggy
- https://reg.readthedocs.org/en/latest/

